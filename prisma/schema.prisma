// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String
  name          String?
  image         String?
  emailVerified DateTime?

  // Relations
  accounts Account[]
  sessions Session[]
  entries  Entry[]   // âœ… back-reference for authored entries
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Entry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String? @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])

  entryTags EntryTag[]  // many-to-many via join model
}

model Tag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique

  entryTags EntryTag[]
}

/// Join table for many-to-many
model EntryTag {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  entryId String @db.ObjectId
  tagId   String @db.ObjectId

  entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([entryId, tagId])
}
